{"mappings":"ACEA,IAqBkB,EArBZ,EAAQ,SAAS,aAAa,CAAC,SAqB/B,EAAA,AAAuB,OAAX,CAAA,EAAA,EAAM,KAAK,AAAL,GAAN,AAAA,KAAA,IAAA,EAAA,KAAA,EAAA,EAAa,IAAI,CAAC,EAAE,CAEtC,GAAI,EAAW,CACb,IAAM,EAAkB,EAAU,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,CAAA,GAErD,EAAU,YAAY,CACpB,EACA,EAAU,KAAK,CAAC,EAAU,KAAK,CAAC,MAAM,CAAG,EAAE,CAE/C,EAEA,AA9BA,WACE,IAAM,EAAY,EAAM,KAAK,CAAC,IAAI,CAAC,EAAE,CAE/B,EAAsB,EAAU,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,CAAA,GAEzD,EAAU,YAAY,CACpB,EACA,EAAU,KAAK,CAAC,EAAU,KAAK,CAAC,MAAM,CAAG,EAAE,EAG7C,IAAM,EAAc,EAAM,OAAO,CAAC,EAAE,CAAC,IAAI,CAEpC,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,CAAA,CAAA,OAAA,QAAA,CAAA,GAAb,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAA0B,CAA1B,IAAM,EAAN,EAAA,KAAA,CACG,EAAY,EAAI,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,CAAA,GAEzC,EAAI,YAAY,CAAC,EAAW,EAAI,KAAK,CAAC,EAAI,KAAK,CAAC,MAAM,CAAG,EAAE,CAC7D,C,C,M,E,CAJK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAKP","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar _table_tFoot;\nvar table = document.querySelector(\"table\");\nfunction cloneColumn() {\n    var headerRow = table.tHead.rows[0];\n    var cloneColumnPosition = headerRow.cells[1].cloneNode(true);\n    headerRow.insertBefore(cloneColumnPosition, headerRow.cells[headerRow.cells.length - 1]);\n    var contentRows = table.tBodies[0].rows;\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = contentRows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            var cloneCell = row.cells[1].cloneNode(true);\n            row.insertBefore(cloneCell, row.cells[row.cells.length - 1]);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\nvar footerRow = (_table_tFoot = table.tFoot) === null || _table_tFoot === void 0 ? void 0 : _table_tFoot.rows[0];\nif (footerRow) {\n    var cloneFooterCell = footerRow.cells[1].cloneNode(true);\n    footerRow.insertBefore(cloneFooterCell, footerRow.cells[footerRow.cells.length - 1]);\n}\ncloneColumn();\n\n//# sourceMappingURL=index.ee8533f2.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\n\nfunction cloneColumn() {\n  const headerRow = table.tHead.rows[0];\n\n  const cloneColumnPosition = headerRow.cells[1].cloneNode(true);\n\n  headerRow.insertBefore(\n    cloneColumnPosition,\n    headerRow.cells[headerRow.cells.length - 1],\n  );\n\n  const contentRows = table.tBodies[0].rows;\n\n  for (const row of contentRows) {\n    const cloneCell = row.cells[1].cloneNode(true);\n\n    row.insertBefore(cloneCell, row.cells[row.cells.length - 1]);\n  }\n}\n\nconst footerRow = table.tFoot?.rows[0];\n\nif (footerRow) {\n  const cloneFooterCell = footerRow.cells[1].cloneNode(true);\n\n  footerRow.insertBefore(\n    cloneFooterCell,\n    footerRow.cells[footerRow.cells.length - 1],\n  );\n}\n\ncloneColumn();\n"],"names":["_table_tFoot","table","document","querySelector","footerRow","tFoot","rows","cloneFooterCell","cells","cloneNode","insertBefore","length","cloneColumn","headerRow","tHead","cloneColumnPosition","contentRows","tBodies","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","cloneCell","err","return"],"version":3,"file":"index.ee8533f2.js.map"}